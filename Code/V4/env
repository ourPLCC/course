# Environment-related classes

Env
%%%
import java.util.*;

public abstract class Env {

    public abstract Val applyEnv(String sym);

    public static Env initEnv() {
        return new EnvNode(new Bindings(), new EnvNull());
    }

    public Val applyEnv(Token tok) {
	return applyEnv(tok.toString());
    }

    public Env extendEnv(Bindings bindings) {
	return new EnvNode(bindings, this);
    }

    // used to print an environment in nested local bindings
    public abstract String toString(int n);

}
%%%

EnvNode
%%%
import java.util.*;

public class EnvNode extends Env {

    public Bindings bindings; // list of local bindings
    public Env env;           // next set of bindings
    
    // create an environment 
    public EnvNode(Bindings bindings, Env env) {
	this.bindings = bindings;
	this.env = env;
    }
    
    public Val applyEnv(String sym) {
        // first look in the local bindings
	for (Binding b : bindings.bindingList) {
	    if (sym.equals(b.id))
                return b.val;
        }
	// if nothing left, we don't have a match in this list of bindings
	return env.applyEnv(sym);
    }

    public String toString(int n) {
	return n + ":" + bindings.toString() + "\n" + env.toString(n+1);
    }

    public String toString() {
	return bindings.toString() + "\n" + env;
    }

}
%%%

EnvNull
%%%
import java.util.*;

public class EnvNull extends Env {

    // create an environment 
    public EnvNull() {
    }
    
    // find the Val corresponding to a given id
    public Val applyEnv(String sym) {
        throw new RuntimeException("no binding for "+sym);
    }

    public String toString(int n) {
	return n + ":\n";
    }

    public String toString() {
	return "\n";
    }
}
%%%

Binding
%%%
public class Binding {

    public String id;
    public Val val;

    public Binding(String id, Val val) {
	this.id = id;
	this.val = val;
    }

    public String toString() {
	return "[" + id + "->" + val.toString() + "]";
    }

}
%%%

Bindings
%%%
import java.util.*;

public class Bindings {

    public List<Binding> bindingList;

    // create an empty list of bindings
    public Bindings() {
	bindingList = new ArrayList<Binding>();
    }

    public Bindings(List<Binding> bindingList) {
	this.bindingList = bindingList;
    }

    // idList is a list of Tokens/Strings (whatever has a toString())
    // valList is a list of Vals
    public Bindings(List<?> idList, List<Val> valList) {
	if (idList.size() != valList.size())
	    throw new RuntimeException("id/val size mismatch");
	bindingList = new ArrayList<Binding>();
	Iterator<?> is = idList.iterator();
	Iterator<Val> vs = valList.iterator();
	while (is.hasNext())
	    bindingList.add(new Binding(is.next().toString(), vs.next()));
    }

    public void add(Binding b) {
	bindingList.add(b);
    }

    public void add(String s, Val v) {
	add(new Binding(s, v));
    }

    public void addFirst(Binding b) {
	bindingList.add(0,b);
    }

    public void addFirst(String s, Val v) {
	addFirst(new Binding(s, v));
    }

    public int size() {
	return bindingList.size();
    }

    public String toString() {
	String s = "";
	for (Binding b : bindingList)
	    s += " " + b;
	return s;
    }
}
%%%
