define pair = proc(x,y)
  proc(t) if t then y else x
define first = proc(p) .p(0)
define rest = proc(p) .p(1)
define nth = proc(n,lst) % zero-based
  if n then .nth(sub1(n),.rest(lst)) else .first(lst)
define seq = proc(n) .pair(n,.seq(add1(n)))
define natno = .seq(0)  %% the entire list of natural numbers!!
%% The above will never terminate with call-by-reference.
%% With call-by-name or call-by-need, we get the following:
.first(natno)             % => 0 
.first(.rest(natno))       % => 1
.first(.rest(.rest(natno))) % => 2, and so forth ...
.nth(100,natno)         % => 100
