Ref
%%%
import java.util.*;

public abstract class Ref {

    public static List<Ref> valsToRefs(List<Val> valList) {
        List<Ref> refList = new ArrayList<Ref>();
        for (Val v : valList)
            refList.add(new ValRef(v));
        return refList;
    }

    public abstract Val deRef();
    public abstract Val setRef(Val v);
}

%%%

ThunkRef
%%%

public class ThunkRef extends Ref {

    public Exp exp;
    public Env env;
    public Val val;

    public ThunkRef(Exp exp, Env env) {
        this.exp = exp;
        this.env = env;
        this.val = null; // memoized
    }

    // implements call-by-need:
    // evaluate the expression, if needed, and memoize the result
    public Val deRef() {
        if (val == null)
            val = exp.eval(env);
        return val;
    }

    public Val setRef(Val v) {
	throw new RuntimeException("cannot modify a read-only expression");
    }

}
%%%


ValRef
%%%

public class ValRef extends Ref {

    public Val val;

    public ValRef(Val val) {
        this.val = val;
    }

    public Val deRef() {
        return val;
    }

    public Val setRef(Val v) {
        return val = v;
    }

}
%%%

# read-only value
ValRORef
%%%

public class ValRORef extends ValRef {

    public ValRORef(Val val) {
        super(val);
    }

    public Val setRef(Val v) {
        throw new RuntimeException("cannot modify a read-only reference");
    }

}
%%%
