Prim
%%%
    // apply the primitive to the passed values
    public abstract Val apply(Val [] va);
    public abstract ProcType definedType();
%%%

AddPrim
%%%

    public String toString() {
	return "+";
    }

    public Val apply(Val [] va) {
	int i0 = va[0].intVal().val;
	int i1 = va[1].intVal().val;
	return new IntVal(i0 + i1);
    }

    public ProcType definedType() {
	return Type.ii_i;
    }
%%%

SubPrim
%%%

    public String toString() {
	return "-";
    }

    public Val apply(Val [] va) {
	int i0 = va[0].intVal().val;
	int i1 = va[1].intVal().val;
	return new IntVal(i0 - i1);
    }

    public ProcType definedType() {
	return Type.ii_i;
    }
%%%

MulPrim
%%%

    public String toString() {
	return "*";
    }

    public Val apply(Val [] va) {
	int i0 = va[0].intVal().val;
	int i1 = va[1].intVal().val;
	return new IntVal(i0 * i1);
    }

    public ProcType definedType() {
	return Type.ii_i;
    }

%%%

DivPrim
%%%

    public String toString() {
	return "/";
    }

    public Val apply(Val [] va) {
	int i0 = va[0].intVal().val;
	int i1 = va[1].intVal().val;
	if (i1 == 0)
            throw new RuntimeException("attempt to divide by zero");
	return new IntVal(i0 / i1);
    }

    public ProcType definedType() {
	return Type.ii_i;
    }

%%%

Add1Prim
%%%

    public String toString() {
	return "add1";
    }

    public Val apply(Val [] va) {
	int i0 = va[0].intVal().val;
	return new IntVal(i0 + 1);
    }

    public ProcType definedType() {
	return Type.i_i;
    }

%%%

Sub1Prim
%%%

    public String toString() {
	return "sub1";
    }

    public Val apply(Val [] va) {
	int i0 = va[0].intVal().val;
	return new IntVal(i0 - 1);
    }

    public ProcType definedType() {
	return Type.i_i;
    }

%%%

ZeropPrim
%%%

    public String toString() {
	return "zero?";
    }

    public Val apply(Val [] va) {
	int i0 = va[0].intVal().val;
	return new BoolVal(i0 == 0);
    }

    public ProcType definedType() {
	return Type.i_b;
    }

%%%

LTPrim
%%%
    public String toString() {
        return "<?";
    }

    public Val apply(Val [] va) {
        int i0 = va[0].intVal().val;
        int i1 = va[1].intVal().val;
        return new BoolVal(i0 < i1);
    }

    public ProcType definedType() {
        return Type.ii_b;
    }
%%%

LEPrim
%%%
    public String toString() {
        return "<=?";
    }

    public Val apply(Val [] va) {
        int i0 = va[0].intVal().val;
        int i1 = va[1].intVal().val;
        return new BoolVal(i0 <= i1);
    }

    public ProcType definedType() {
        return Type.ii_b;
    }
%%%

GTPrim
%%%
    public String toString() {
        return ">?";
    }

    public Val apply(Val [] va) {
        int i0 = va[0].intVal().val;
        int i1 = va[1].intVal().val;
        return new BoolVal(i0 > i1);
    }

    public ProcType definedType() {
        return Type.ii_b;
    }
%%%

GEPrim
%%%
    public String toString() {
        return ">=?";
    }

    public Val apply(Val [] va) {
        int i0 = va[0].intVal().val;
        int i1 = va[1].intVal().val;
        return new BoolVal(i0 >= i1);
    }

    public ProcType definedType() {
        return Type.ii_b;
    }
%%%

EQPrim
%%%
    public String toString() {
        return "=?";
    }

    public Val apply(Val [] va) {
        int i0 = va[0].intVal().val;
        int i1 = va[1].intVal().val;
        return new BoolVal(i0 == i1);
    }

    public ProcType definedType() {
        return Type.ii_b;
    }
%%%

NEPrim
%%%
    public String toString() {
        return "<>?";
    }

    public Val apply(Val [] va) {
        int i0 = va[0].intVal().val;
        int i1 = va[1].intVal().val;
        return new BoolVal(i0 != i1);
    }

    public ProcType definedType() {
        return Type.ii_b;
    }
%%%

AndPrim
%%%
    public String toString() {
        return "and";
    }

    public Val apply(Val [] va) {
	boolean b0 = va[0].boolVal().val;
	boolean b1 = va[1].boolVal().val;
	return new BoolVal(b0 && b1);
    }

    public ProcType definedType() {
        return Type.bb_b;
    }
%%%

OrPrim
%%%
    public String toString() {
        return "or";
    }

    public Val apply(Val [] va) {
	boolean b0 = va[0].boolVal().val;
	boolean b1 = va[1].boolVal().val;
	return new BoolVal(b0 || b1);
    }

    public ProcType definedType() {
        return Type.bb_b;
    }
%%%

NotPrim
%%%
    public String toString() {
        return "not";
    }

    public Val apply(Val [] va) {
	boolean b0 = va[0].boolVal().val;
	return new BoolVal(!b0);
    }

    public ProcType definedType() {
        return Type.b_b;
    }
%%%
