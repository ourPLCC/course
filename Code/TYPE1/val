Val
%%%
import java.util.*;

public abstract class Val {

    public static Val [] toArray(List<Val> valList) {
        int n = valList.size();
        return valList.toArray(new Val[n]);
    }

    public IntVal intVal() {
        throw new RuntimeException(this + ": not an Int");
    }

    public ProcVal procVal() {
        throw new RuntimeException(this + ": not a Proc");
    }
          
    public BoolVal boolVal() {
        throw new RuntimeException(this + ": not a Bool");
    }

    public boolean isTrue() {
        return false;
    }

    public Val apply(List<Ref> refList, Env e) {
	throw new RuntimeException("cannot apply " + this);
    }
}
%%%

IntVal
%%%
public class IntVal extends Val {

    public int val;
    
    public IntVal(String s) {
	val = Integer.parseInt(s);
    }
    
    public IntVal(int v) {
	val = v;
    }

    public IntVal intVal() {
        return this;
    }
    
    public String toString() {
	return "" + val;
    }

    public static void main(String [] args) {
	Val v = new IntVal(3);
	Val w = new IntVal(0);
	System.out.println("v=" + v);
	System.out.println("w=" + w);
    }
    
}
%%%

ProcVal
%%%
import java.util.*;

public class ProcVal extends Val {

    public Formals formals;
    public TypeExp returnTypeExp;
    public Exp body;
    public Env env;

    public ProcVal(Formals formals, TypeExp returnTypeExp, Exp body, Env env) {
	this.formals = formals;
        this.returnTypeExp = returnTypeExp;
        this.body = body;
        this.env = env;
    }

    public ProcVal procVal() {
        return this;
    }

    public Val apply(List<Ref> refList, Env e) {
        Bindings bindings = new Bindings(formals.varList, refList);
        Env nenv = env.extendEnvRef(bindings);
        return body.eval(nenv);
    } 

    public String toString() {
        return "proc(" + formals + "):" + returnTypeExp.toType();
    }
}

%%%

BoolVal
%%%
public class BoolVal extends Val {

    public boolean val;
    
    public BoolVal(boolean b) {
	val = b;
    }
    
    public boolean isTrue() {
	return val;
    }

    public BoolVal boolVal() {
        return this;
    }
    
    public String toString() {
	return "" + val;
    }

    public static void main(String [] args) {
	Val t = new BoolVal(true);
	Val f = new BoolVal(false);
	System.out.println("t=" + t);
	System.out.println("f=" + f);
    }
    
}
%%%

