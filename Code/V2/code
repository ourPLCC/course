# class methods

Program
%%%

    public static Env env = Env.initEnv(); // the initial environment

    public String toString() {
	return exp.eval(env).toString();
    }

%%%

Exp
%%%
    public abstract Val eval(Env env);
%%%

PrimappExp
%%%

    public String toString() {
	return prim.toString()+ "(" + rands + ")";
    }

    public Val eval(Env env) {
        // evaluate the terms in the expression list
	// and apply the prim to the array of integer results
        List<Val> args = rands.evalRands(env);
	Val [] va = Val.toArray(args);
        return prim.apply(va);
    }

%%%

LitExp
%%%

    public Val eval(Env env) {
	return new IntVal(lit.toString());
    }

    public String toString() {
	return lit.toString();
    }

%%%

IfExp
%%%
    public Val eval(Env env) {
        Val testVal = testExp.eval(env);
        if (testVal.isTrue())
	    return trueExp.eval(env);
        else
            return falseExp.eval(env);
    }

    public String toString() {
        return "if " + testExp + " then " + trueExp + " else " +falseExp;
    }
%%%

VarExp
%%%

    public Val eval(Env env) {
	return env.applyEnv(var);
    }

    public String toString() {
	return var.toString();
    }

%%%

Rands
%%%
    public String toString() {
        String s = "";   // the string to return
        String sep = ""; // no separator for the first expression
        // get all of the expressions in the expression list
        for (Exp e : expList) {
            s += sep + e;
            sep = ",";   // commas separate the rest of the expressions
        }
        return s;
    }

    public List<Val> evalRands(Env env) {
        List<Val> args = new ArrayList<Val>();
        for (Exp e : expList)
            args.add(e.eval(env));
        return args;
    }
%%%


