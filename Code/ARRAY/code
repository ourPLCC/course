# class methods

Program
%%%

    public static Env initEnv = Env.initEnv();

%%%

Define
%%%
    // notice that calling toString triggers a modification
    // of the initial environment
    public String toString() {
        String id = var.toString();
        Val val = exp.eval(initEnv);
        initEnv.addFirst(new Binding(id, new ValRef(val)));
        return id; // return *something*
    }
%%%

Eval
%%%
    public String toString() {
        return exp.eval(initEnv).toString();
    }
%%%

Exp
%%%
    public abstract Val eval(Env env);
%%%

ExitExp
%%%
    public Val eval(Env env) {
        System.err.println("...exiting...");
        System.exit(0);
        return null;
    }
%%%

PrimappExp
%%%

    public String toString() {
        return prim.toString()+ "(" + rands + ")";
    }

    public Val eval(Env env) {
        // evaluate the terms in the expression list
        // and apply the prim to the array of integer results
        List<Val> valList = rands.evalRands(env);
        Val [] va = Val.toArray(valList);
        return prim.apply(va);
    }

%%%

LitExp
%%%

    public Val eval(Env env) {
        return new IntVal(lit.toString());
    }

    public String toString() {
        return lit.toString();
    }

%%%

ChrExp
%%%
    public Val eval(Env env) {
	return new IntVal(chr.toString().charAt(1));
    }

    public String toString() {
        return chr.toString();
    }
%%%

StrngExp
%%%
    public Val eval(Env env) {
	String s = strng.toString();
        int len = s.length();
        s = s.substring(1,len-1);
	return strngToList(s, 0);
    }

    private static ListVal strngToList(String s, int pos) {
        if (pos == s.length())
            return new ListNull();
        char c = s.charAt(pos++);
        if (c == '\\') {
            c = s.charAt(pos++);
            switch (c) {
            case 'b': c = '\b'; break;
            case 'n': c = '\n'; break;
            case 't': c = '\t'; break;
            case 'r': c = '\r'; break;
            case 'f': c = '\f'; break;
            }
        }
        return strngToList(s, pos).add(new IntVal((int)c));
    }
        
    public String toString() {
	return strng.toString();
    }
%%%

IfExp
%%%
    public Val eval(Env env) {
        Val testVal = testExp.eval(env);
        if (testVal.isTrue())
            return trueExp.eval(env);
        else
            return falseExp.eval(env);
    }

    public String toString() {
        return "if " + testExp + " then " + trueExp + " else " +falseExp;
    }
%%%

RefExp
%%%
    public Val eval(Env env) {
        return varef.evalRef(env).deRef();
    }

    public String toString() {
        return varef.toString();
    }
%%%

QueryExp
%%%
    public Val eval(Env env) {
        ArrayVal ary = arrayExp.eval(env).arrayVal();
        IntVal ndx = indexExp.eval(env).intVal();
        int val = ndx.val;
        return (val >= 0 && val < ary.refArray.length) ? IntVal.one : IntVal.zero;
    }

    public String toString() {
        return "?";
    }
%%%

Varef
%%%
    public abstract Ref evalRef(Env env);
%%%

VarRef
%%%
    public Ref evalRef(Env env) {
        return env.applyEnvRef(var);
    }
%%%

AryRef
%%%
    public Ref evalRef(Env env) {
        ArrayVal ary = arrayExp.eval(env).arrayVal();
        IntVal ndx = indexExp.eval(env).intVal();
        return ary.refArray[ndx.val];
    }
%%%

LetExp
%%%
    public Val eval(Env env) {
        Env nenv = letDecls.addBindings(env);
        return exp.eval(nenv);
    }

    public String toString() {
        return " ...LetExp... ";
    }
%%%

LetrecExp
%%%
    public Val eval(Env env) {
        Env nenv = letrecDecls.addBindings(env);
        return exp.eval(nenv);
    }

    public String toString() {
        return " ...LetrecExp... ";
    }
%%%

ProcExp
%%%
    public Val eval(Env env) {
        return proc.makeClosure(env);
    }

    public String toString() {
        return " ...ProcExp... ";
    }
%%%

WhileExp
%%%
    public Val eval(Env env) {
        while (testExp.eval(env).isTrue())
            bodyExp.eval(env); // discard the value
        return resultExp.eval(env);
    }

    public String toString() {
        return " ...WhileExp... ";
    }
%%%

ArrayExp
%%%
    public Val eval(Env env) {
        IntVal v = exp.eval(env).intVal();
        return new ArrayVal(v.val);
    }

    public String toString() {
        return " ...ArrayExp... ";
    }
%%%

ListExp
%%%
    public Val eval(Env env) {
	List<Val> valList = rands.evalRands(env);
	ListVal listVal = new ListNull();
	int n = valList.size();
	// process the elements in reverse order
	while (n > 0)
	    listVal = new ListNode(valList.get(--n), listVal);
	return listVal;
    }

    public String toString() {
	return " ...ListExp... ";
    }
%%%

ClassExp
%%%
    public Val eval(Env env) {
        return classDecl.eval(env);
    }

%%%

ClassDecl
%%%
    public Val eval(Env env) {
	ClassVal superClass = ext.toClassVal(env);
        return new StdClass(superClass, statics, fields, methods);
    }
%%%

Statics
%%%
    // Add new bindings to the static bindings -- behaves like top-level
    // defines.  Don't allow a redefinition of a binding that already
    // occurs in the static bindings.
    public void addStaticBindings(Bindings staticBindings, Env staticEnv) {
        Iterator<Token> varIter = varList.iterator(); // LHS identifiers
        Iterator<Exp> expIter = expList.iterator();    // RHS expressions
        while(varIter.hasNext()) {
            String id = varIter.next().toString(); // the LHS identifier
            for (Binding b : staticBindings.bindingList) {
                if (id.equals(b.id))
                    throw new RuntimeException(id + ": multiply defined static identifier");
            }
            Exp exp = expIter.next();    // the RHS expression
            Val val = exp.eval(staticEnv);
            Binding b = new Binding(id, new ValRef(val));
            staticBindings.add(b);
        }
    }
%%%

NewExp
%%%
    public Val eval(Env env) {
        // get the class from which this object will be created
        Val val = exp.eval(env);
        // create a reference to a dummy value (nil)
        Ref objRef = new ValRef(Val.nil);
        // let the class create the object
        ObjectVal objectVal = val.makeObject(objRef);
        // set the reference to the newly created object
        return objRef.setRef(objectVal);
    }
%%%

AppExp
%%%

    public Val eval(Env env) {
        Val p = exp.eval(env);
        List<Val> valList = rands.evalRands(env);
        return p.apply(valList);
    }

    public String toString() {
        return " ...AppExp... ";
    }

%%%

SeqExp
%%%
    public Val eval(Env env) {
        Val v = exp.eval(env);
        for (Exp e : seqExps.expList)
            v = e.eval(env);
        return v;
    }

    public String toString() {
        return " ...SeqExp... ";
    }

%%%

SetExp
%%%
    public Val eval(Env env) {
        // return loc.getEnv(env).applyEnvRef(var).setRef(exp.eval(env));
        Env nenv = loc.getEnv(env);
        Ref ref = varef.evalRef(nenv);
        Val v = exp.eval(env); 
        return ref.setRef(v);
    }

    public String toString() {
        return " ...SetExp... ";
    }
%%%

Loc
%%%
    public abstract Env getEnv(Env env);
%%%

ObjLoc
%%%
    public Env getEnv(Env env) {
        Val v = exp.eval(env);
        return v.env();
    }
%%%

SimpleLoc
%%%
    public Env getEnv(Env env) {
        return env;
    }
%%%

EnvExp
%%%
    public Val eval(Env env) {
        Val v = vExp.eval(env);
        return eExp.eval(v.env());
    }

%%%

EenvExp
%%%
    public Val eval(Env env) {
        Val v = exp.eval(env);      // the environment object
        return mangle.eval(v, env);
    }
%%%

Mangle
%%%
    public Val eval(Val v, Env env) {
        Iterator<Exp> expIter = expList.iterator();
        Iterator<Rands> randsIter = randsList.iterator();
        while (expIter.hasNext()) {
            // expIter.next() ProcExp to apply
            // randsIter.next() are the method rands -- evaluated in env
            // v.env() is the environment in which to build the ProcVal
            Val p = expIter.next().eval(v.env());
            List<Val> valList = randsIter.next().evalRands(env);
            v = p.apply(valList);
        }
        return v;
    }
%%%

WithExp
%%%
    public Val eval(Env env) {
        return new EnvExp(vExp, eExp).eval(env);
    }
%%%

NilExp
%%%
    public Val eval(Env env) {
        return Val.nil;
    }

%%%

SendExp
%%%

    public Val eval(Env env) {
        Val v = objExp.eval(env);
        Val p = procExp.eval(v.env()); // in the object env
        List<Val> valList = rands.evalRands(env); // in calling env
        return p.apply(valList);
    }

    public String toString() {
        return " ...SendExp... ";
    }

%%%

AtExp
%%%
    public Val eval(Env env) {
        return new ObjectVal(null, env);
    }

%%%

AtAtExp
%%%
    public Val eval(Env env) {
        System.out.println(env.toString());
        return new ObjectVal(null, env);
    }
%%%

DisplayExp
%%%
    public Val eval(Env env) {
        Val v = exp.eval(env);
        System.out.print(v);
        return v;
    }

%%%

Display1Exp
%%%
    public Val eval(Env env) {
        Val v = exp.eval(env);
        System.out.print(v+" ");
        return v;
    }

%%%

NewlineExp
%%%
    public Val eval(Env env) {
        System.out.println();
        return Val.nil;
    }

%%%

PutcExp
%%%
    public Val eval(Env env) {
        Val v = exp.eval(env);
        System.out.print(v.putc());
        return Val.nil;
    }
%%%

ErrorExp
%%%
    public Val eval(Env env) {
	throw new RuntimeException("!!error!!");
    }
%%%

Ext
%%%
    public abstract ClassVal toClassVal(Env env);
%%%

Ext0
%%%

    public ClassVal toClassVal(Env env) {
        return new EnvClass(env);
    }

%%%

Ext1
%%%
    public ClassVal toClassVal(Env env) {
        Val v = exp.eval(env);
        if (! (v instanceof ClassVal))
            throw new RuntimeException("cannot extend a non-class");
        return v.classVal();
    }
%%%

Proc
%%%
    public Val makeClosure(Env env) {
        return new ProcVal(formals, exp, env);
    }

%%%

LetDecls
%%%
    public Env addBindings(Env env) {
	Rands rands = new Rands(expList);
	List<Val> valList = rands.evalRands(env);
	List<Ref> refList = Ref.valsToRefs(valList);
	Bindings bindings = new Bindings(varList, refList);
        return env.extendEnvRef(bindings);
    }

    public String toString() {
        return " ...LetDecls... ";
    }
%%%

LetrecDecls
%%%
    public Env addBindings(Env env) {
        Env nenv = env.extendEnvRef(null); // no bindings yet
        List<Val> valList = new ArrayList<Val>();
        for (Proc p : procList)
            valList.add(p.makeClosure(nenv));
	List<Ref> refList = Ref.valsToRefs(valList);
        Bindings bindings = new Bindings(varList, refList);
	nenv.replaceBindings(bindings);
	return nenv;
    }

    public Bindings toBindingsRef(Env env) {
        List<Ref> refList = new ArrayList<Ref>();
        for (Proc p : procList)
            refList.add(new ValRef(p.makeClosure(env)));
        return new Bindings(varList, refList);
    }
%%%

Rands
%%%
    public String toString() {
        String s = "";   // the string to return
        String sep = ""; // no separator for the first expression
        // get all of the expressions in the expression list
        for (Exp e : expList) {
            s += sep + e;
            sep = ",";   // commas separate the rest of the expressions
        }
        return s;
    }

    public List<Val> evalRands(Env env) {
        List<Val> valList = new ArrayList<Val>();
        for (Exp e : expList)
            valList.add(e.eval(env));
        return valList;
    }

%%%
