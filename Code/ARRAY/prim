Prim
%%%
    // apply the primitive to the passed values
    public abstract Val apply(Val [] va);
%%%

AddPrim
%%%

    public String toString() {
  return "+";
    }

    public Val apply(Val [] va) {
        if (va.length != 2)
            throw new RuntimeException("two arguments expected");
        int i0 = va[0].intVal().val;
        int i1 = va[1].intVal().val;
        return new IntVal(i0 + i1);
    }
%%%

SubPrim
%%%

    public String toString() {
        return "-";
    }

    public Val apply(Val [] va) {
        if (va.length != 2)
            throw new RuntimeException("two arguments expected");
        int i0 = va[0].intVal().val;
        int i1 = va[1].intVal().val;
        return new IntVal(i0 - i1);
    }
%%%

MulPrim
%%%

    public String toString() {
        return "*";
    }

    public Val apply(Val [] va) {
        if (va.length != 2)
            throw new RuntimeException("two arguments expected");
        int i0 = va[0].intVal().val;
        int i1 = va[1].intVal().val;
        return new IntVal(i0 * i1);
    }

%%%

DivPrim
%%%

    public String toString() {
        return "/";
    }

    public Val apply(Val [] va) {
        if (va.length != 2)
            throw new RuntimeException("two arguments expected");
        int i0 = va[0].intVal().val;
        int i1 = va[1].intVal().val;
        if (i1 == 0)
            throw new RuntimeException("attempt to divide by zero");
        return new IntVal(i0 / i1);
    }

%%%

Add1Prim
%%%

    public String toString() {
        return "add1";
    }

    public Val apply(Val [] va) {
        if (va.length != 1)
            throw new RuntimeException("one argument expected");
        int i0 = va[0].intVal().val;
        return new IntVal(i0 + 1);
    }

%%%

Sub1Prim
%%%

    public String toString() {
        return "sub1";
    }

    public Val apply(Val [] va) {
        if (va.length != 1)
            throw new RuntimeException("one argument expected");
        int i0 = va[0].intVal().val;
        return new IntVal(i0 - 1);
    }

%%%

ZeropPrim
%%%

    public String toString() {
        return "zero?";
    }

    public Val apply(Val [] va) {
        if (va.length != 1)
            throw new RuntimeException("one argument expected");
        int i0 = va[0].intVal().val;
        return i0 == 0 ? Val.one : Val.zero;
    }

%%%

LTPrim
%%%
    public String toString() {
        return "<?";
    }

    public Val apply(Val [] va) {
        if (va.length != 2)
            throw new RuntimeException("two arguments expected");
        int i0 = va[0].intVal().val;
        int i1 = va[1].intVal().val;
        return i0 < i1 ? Val.one : Val.zero;
    }
%%%

LEPrim
%%%
    public String toString() {
        return "<=?";
    }

    public Val apply(Val [] va) {
        if (va.length != 2)
            throw new RuntimeException("two arguments expected");
        int i0 = va[0].intVal().val;
        int i1 = va[1].intVal().val;
        return i0 <= i1 ? Val.one : Val.zero;
    }
%%%

GTPrim
%%%
    public String toString() {
        return ">?";
    }

    public Val apply(Val [] va) {
        if (va.length != 2)
            throw new RuntimeException("two arguments expected");
        int i0 = va[0].intVal().val;
        int i1 = va[1].intVal().val;
        return i0 > i1 ? Val.one : Val.zero;
    }
%%%

GEPrim
%%%
    public String toString() {
        return ">=?";
    }

    public Val apply(Val [] va) {
        if (va.length != 2)
            throw new RuntimeException("two arguments expected");
        int i0 = va[0].intVal().val;
        int i1 = va[1].intVal().val;
        return i0 >= i1 ? Val.one : Val.zero;
    }
%%%

NEPrim
%%%
    public String toString() {
        return "<>?";
    }

    public Val apply(Val [] va) {
        if (va.length != 2)
            throw new RuntimeException("two arguments expected");
        int i0 = va[0].intVal().val;
        int i1 = va[1].intVal().val;
        return i0 != i1 ? Val.one : Val.zero;
    }
%%%

EQPrim
%%%
    public String toString() {
        return "=?";
    }

    public Val apply(Val [] va) {
        if (va.length != 2)
            throw new RuntimeException("two arguments expected");
        int i0 = va[0].intVal().val;
        int i1 = va[1].intVal().val;
        return i0 == i1 ? Val.one : Val.zero;
    }
%%%

ObjectpPrim
%%%
    public Val apply(Val [] va) {
	if (va.length != 1)
            throw new RuntimeException("one argument expected");
        Val v0 = va[0];
        return v0.isObject() ? Val.one : Val.zero;
   }
%%%

ClasspPrim
%%%
    public Val apply(Val [] va) {
	if (va.length != 1)
            throw new RuntimeException("one argument expected");
        Val v0 = va[0];
        return v0.isClass() ? Val.one : Val.zero;
   }
%%%

ListpPrim
%%%
    public Val apply(Val [] va) {
	if (va.length != 1)
	    throw new RuntimeException("one argument expected");
        Val v0 = va[0];
	return v0.isList() ? Val.one : Val.zero;
    }
%%%
	
FirstPrim
%%%
    public Val apply(Val [] va) {
        if (va.length != 1)
            throw new RuntimeException("one argument expected");
        ListNode lst = va[0].listNode();
        return lst.val;
    }
%%%

RestPrim
%%%
    public Val apply(Val [] va) {
        if (va.length != 1)
            throw new RuntimeException("one argument expected");
        ListNode lst = va[0].listNode();
        return lst.listVal;
    }
%%%

AddFirstPrim
%%%
    public Val apply(Val [] va) {
        if (va.length != 2)
            throw new RuntimeException("two arguments expected");
        Val v = va[0];
        ListVal lst = va[1].listVal();
        return new ListNode(v, lst);
    }
%%%

LenPrim
%%%
    public Val apply(Val [] va) {
       if (va.length != 1)
           throw new RuntimeException("len: one argument expected");
       LenVal v = va[0].lenVal();
       return new IntVal(v.len());
    }
%%%

ArraypPrim
%%%
    public Val apply(Val [] va) {
	if (va.length != 1)
	    throw new RuntimeException("one argument expected");
        Val v0 = va[0];
	return v0.isArray() ? Val.one : Val.zero;
    }
%%%
	
FirstPrim
%%%
    public Val apply(Val [] va) {
        if (va.length != 1)
            throw new RuntimeException("one argument expected");
        ListNode lst = va[0].listNode();
        return lst.val;
    }
%%%
