# Language ARRAY
#   Language OBJ with ARRAY and WHILE

# Lexical specification
skip WHITESPACE '\s+'
skip COMMENT '%.*'
LIT '\d+'
LPAREN '\('
RPAREN '\)'
COMMA ','
ADDOP '\+'
SUBOP '\-'
MULOP '\*'
DIVOP '/'
ADD1OP 'add1'
SUB1OP 'sub1'
ZEROP 'zero\?'
LENOP 'len'
LTP '<\?'
LEP '<=\?'
GTP '>\?'
GEP '>=\?'
NEP '<>\?'
EQP '=\?'
LISTP 'list\?'
ARRAYP 'array\?'
OBJECTP 'object\?'
CLASSP 'class\?'
FIRSTOP 'first'
RESTOP 'rest'
ADDFIRSTOP 'addFirst'
IF 'if'
THEN 'then'
ELSE 'else'
LET 'let'
LETREC 'letrec'
DEFINE 'define'
IN 'in'
EQUALS '='
EXIT 'exit'
PROC 'proc'
SET 'set'
ARRAY 'array'
WHILE 'while'
DO 'do'
BACK '\\'
CLASS 'class'
EXTENDS 'extends'
STATIC 'static'
FIELD 'field'
METHOD 'method'
END 'end'
WITH 'with'
EVAL 'eval'
NEW 'new'
SEND 'send'
NIL 'nil'
DISPLAY 'display'
DISPLAY1 'display#'
NEWLINE 'newline'
PUTC 'putc'
ERROR 'error'
AT '@'
ATAT '@@'
DOT '\.'
LBRACE '\{'
RBRACE '\}'
LBRACK '\['
RBRACK '\]'
LANGLE '<'
RANGLE '>'
LLANGLE '!<'
RRANGLE '!>'
SEMI ';'
CHR "'."
STRNG '\"(\\.|[^\"\\])*\"'
QUERY '\?\\'
VAR '[A-Za-z\&\?\$][\w\?\&\$]*'
%
# Grammar
<program>:Define ::= DEFINE <VAR> EQUALS <exp>
<program>:Eval   ::= <exp>
<exp>:ExitExp    ::= EXIT
<exp>:LitExp     ::= <LIT>
<exp>:ChrExp     ::= <CHR>
<exp>:StrngExp   ::= <STRNG>
<exp>:RefExp     ::= <varef>
<exp>:SetExp     ::= SET <loc> <varef> EQUALS <exp>
<exp>:IfExp      ::= IF <exp>testExp THEN <exp>trueExp ELSE <exp>falseExp
<exp>:PrimappExp ::= <prim> LPAREN <rands> RPAREN
<exp>:LetExp     ::= LET <letDecls> IN <exp>
<exp>:LetrecExp  ::= LETREC <letrecDecls> IN <exp>
<exp>:ProcExp    ::= <proc>
<exp>:AppExp     ::= DOT <exp> LPAREN <rands> RPAREN
<exp>:SeqExp     ::= LBRACE <exp> <seqExps> RBRACE
<exp>:ListExp    ::= LBRACK <rands> RBRACK
<exp>:ArrayExp   ::= ARRAY LBRACK <exp> RBRACK
<exp>:WhileExp   ::= WHILE <exp>testExp DO <exp>bodyExp ELSE <exp>resultExp
<exp>:ClassExp   ::= <classDecl>
<exp>:NilExp     ::= NIL
<exp>:NewExp     ::= NEW <exp>
<exp>:EnvExp     ::= LANGLE <exp>vExp RANGLE <exp>eExp
# send obj msg(rands) is the same as .<obj>msg(rands)
<exp>:SendExp    ::= SEND <exp>objExp <exp>procExp LPAREN <rands> RPAREN
# with obj eval exp is the same as <obj>exp
<exp>:WithExp    ::= WITH <exp>vExp EVAL <exp>eExp 
<exp>:AtExp      ::= AT
<exp>:AtAtExp    ::= ATAT
<exp>:DisplayExp ::= DISPLAY <exp>
<exp>:Display1Exp  ::= DISPLAY1 <exp>
<exp>:NewlineExp ::= NEWLINE
<exp>:PutcExp    ::= PUTC <exp>
# !<obj>msg1(rands1)>msg2(rands2)>msg3(rands3)...!>
# is the same as .<.<.<obj>msg1(rands1)>msg2(rands2)>msg3(rands3) ...
<exp>:EenvExp    ::= LLANGLE <exp> <mangle> RRANGLE
<exp>:ErrorExp   ::= ERROR
<varef>:VarRef   ::= <VAR>
<exp>:QueryExp   ::= QUERY <exp>arrayExp LBRACK <exp>indexExp RBRACK
<varef>:AryRef   ::= BACK <exp>arrayExp LBRACK <exp>indexExp RBRACK
<classDecl>      ::= CLASS <ext> <statics> <fields> <methods> END
<mangle>         **= RANGLE <exp> LPAREN <rands> RPAREN
<ext>:Ext1       ::= EXTENDS <exp>
<ext>:Ext0       ::=
<loc>:ObjLoc     ::= LANGLE <exp> RANGLE
<loc>:SimpleLoc  ::=
<statics>        **= STATIC <VAR> EQUALS <exp>
<fields>         **= FIELD <VAR>
<methods>        **= METHOD <VAR> EQUALS <proc>
<seqExps>        **= SEMI <exp>
<proc>           ::= PROC LPAREN <formals> RPAREN <exp>
<formals>        **= <VAR> +COMMA
<letDecls>       **= <VAR> EQUALS <exp>
<letrecDecls>    **= <VAR> EQUALS <proc>
<rands>          **= <exp> +COMMA
<prim>:AddPrim   ::= ADDOP
<prim>:SubPrim   ::= SUBOP
<prim>:MulPrim   ::= MULOP
<prim>:DivPrim   ::= DIVOP
<prim>:Add1Prim  ::= ADD1OP
<prim>:Sub1Prim  ::= SUB1OP
<prim>:ZeropPrim ::= ZEROP
<prim>:LTPrim    ::= LTP
<prim>:LEPrim    ::= LEP
<prim>:GTPrim    ::= GTP
<prim>:GEPrim    ::= GEP
<prim>:NEPrim    ::= NEP
<prim>:EQPrim    ::= EQP
<prim>:ObjectpPrim  ::= OBJECTP
<prim>:ClasspPrim   ::= CLASSP
<prim>:ListpPrim    ::= LISTP
<prim>:ArraypPrim   ::= ARRAYP
<prim>:FirstPrim    ::= FIRSTOP
<prim>:RestPrim     ::= RESTOP
<prim>:AddFirstPrim ::= ADDFIRSTOP
<prim>:LenPrim      ::= LENOP
%
include code
include prim
include env
include val
include list
include class
include ref
include len
