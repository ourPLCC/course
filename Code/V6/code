# class methods

Program
%%%
    public static Env env = Env.initEnv(); // the initial environment
%%%

Define
%%%
    // notice that calling toString triggers a modification
    // of the initial environment
    public String toString() {
        Val val = exp.eval(Program.env);
	String s = var.str;
        Program.env.addFirst(new Binding(s, val));
	return s; // gotta return *something*
    }
%%%

Eval
%%%
    public String toString() {
	return exp.eval(Program.env).toString();
    }
%%%

Exp
%%%
    public abstract Val eval(Env env);
%%%

PrimappExp
%%%

    public String toString() {
	return prim.toString()+ "(" + rands + ")";
    }

    public Val eval(Env env) {
        // evaluate the terms in the expression list
	// and apply the prim to the array of integer results
        List<Val> args = rands.evalRands(env);
	Val [] va = Val.toArray(args);
        return prim.apply(va);
    }

%%%

LitExp
%%%

    public Val eval(Env env) {
	return new IntVal(lit.str);
    }

    public String toString() {
	return lit.str;
    }

%%%

IfExp
%%%
    public Val eval(Env env) {
        Val testVal = testExp.eval(env);
        if (testVal.isTrue())
	    return trueExp.eval(env);
        else
            return falseExp.eval(env);
    }

    public String toString() {
        return "if " + testExp + " then " + trueExp + " else " +falseExp;
    }
%%%

VarExp
%%%

    public Val eval(Env env) {
	return env.applyEnv(var.str);
    }

    public String toString() {
	return var.str;
    }

%%%

LetExp
%%%
    public Val eval(Env env) {
	Env nenv = letDecls.addBindings(env);
	return exp.eval(nenv);
    }

    public String toString() {
	return " ...LetExp... ";
    }
%%%

LetrecExp
%%%
    public Val eval(Env env) {
	Env nenv = letrecDecls.addBindings(env);
        return exp.eval(nenv);
    }

    public String toString() {
        return " ...LetrecExp... ";
    }
%%%

ProcExp
%%%
    public Val eval(Env env) {
	return proc.makeClosure(env);
    }

    public String toString() {
        return " ...ProcExp... ";
    }
%%%

AppExp
%%%

    public Val eval(Env env) {
        Val v = exp.eval(env);
        List<Val> args = rands.evalRands(env);
        return v.apply(args, env);
    }

    public String toString() {
        return " ...AppExp... ";
    }

%%%

SeqExp
%%%
    public Val eval(Env env) {
        Val v = exp.eval(env);
        for (Exp e : seqExps.expList)
            v = e.eval(env);
        return v;
    }

    public String toString() {
        return " ...SeqExp... ";
    }

%%%

Proc
%%%
    public Val makeClosure(Env env) {
	return new ProcVal(formals, exp, env);
    }
%%%

LetDecls
%%%
    public Env addBindings(Env env) {
	Rands rands = new Rands(expList);
	List<Val> valList = rands.evalRands(env);
	Bindings bindings = new Bindings(varList, valList);
	return env.extendEnv(bindings);
    }

    public String toString() {
	return " ...LetDecls... ";
    }
%%%

LetrecDecls
%%%
    public Env addBindings(Env env) {
	Env nenv = env.extendEnv(null); // no bindings yet
	List<Val> valList = new ArrayList<Val>();
	for (Proc p : procList)
	    valList.add(p.makeClosure(nenv));
	Bindings bindings = new Bindings(varList, valList);
	nenv.replaceBindings(bindings);
	return nenv;
    }
%%%

Rands
%%%
    public String toString() {
        String s = "";   // the string to return
        String sep = ""; // no separator for the first expression
        // get all of the expressions in the expression list
        for (Exp e : expList) {
            s += sep + e;
            sep = ",";   // commas separate the rest of the expressions
        }
        return s;
    }

    // evaluate the individual terms in expList using the given environment
    // and return a List<Val> object
    public List<Val> evalRands(Env env) {
        List<Val> args = new ArrayList<Val>();
        for (Exp e : expList)
            args.add(e.eval(env));
        return args;
    }
%%%

