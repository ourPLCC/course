%% A set of classes that implement Lists, similar
%% to the built-in list structure in OBJ.

define lst = class

    %% create a 'lst' object from a built-in list [...]
    static fromList = proc(list) % list is a 'built-in' list
      if list
      then .<new lstNode>init(first(list), .fromList(rest(list)))
      else null

    %% add a value to the current lst object, returning the new lst
    method add = proc(t) .<new lstNode>init(t,self)

end

%% a class that defines a lst object with one or more values
define lstNode = class extends lst

    field fst
    field rst
    field siz
    
    method init = proc(fst,rst)
        { set <self>fst = fst
        ; set <self>rst = rst
        ; set siz = add1(.<rst>size())
        ; self
        }
    method size = proc() siz
    method null? = proc() 0
    method show = proc() {display# fst ; .<rst>show() ; self }
    method append = proc(l) :<rst>append(l)>add(fst):>
    method filter = proc(f)
      let
        filtered = .<rst>filter(f) % recursive call
      in
        if .f(fst) then .<filtered>add(fst) else filtered
    method map = proc(f) :<rst>map(f)>add(.f(fst)):>

    %% sort this lst, returning a new lst
    %% uses quicksort, with the first element of the lst as pivot
    method sort = proc()
      let
        %% sort everything less than the pivot
        lt = :<rst>filter(proc(t) <?(t, fst))>sort():>           
        %% sort everything greater than or equal to the pivot
        %% and add the pivot to the list
        ge = :<rst>filter(proc(t) >=?(t, fst))>sort()>add(fst):>
      in
        %% combine the two halves into a single sorted list
        .<lt>append(ge)

    %% create a built-in list [...] from this lst object
    method toList = proc() addFirst(fst, .<rst>toList())

end

%% a class that defines an empty list object (no values)
define lstNull = class extends lst

    method null? = proc() 1
    method show = proc() { newline ; self }
    method append = proc(l) l
    method filter = proc(f) self
    method map = proc(f) self
    method sort = proc() self
    method size = proc() 0
    method toList = proc () []

end

define null = new lstNull

define z = :<null>add(3)>add(5):>

%% start with an empty list, then add 3, and then 5
define z = :<null>show()
                 >add(3)
                 >show()
                 >add(5)
                 >show()
                 :>



%% take the list z and show a new list
%% with each element the square of the original element
:<z>map(proc(x) *(x,x))>show():>

%% take the list z and show the new list
%% consisting of all the original list elements that are less than 4
:<z>filter(proc(x) <?(x,4))>show():>

%% create three copies of the list z, show the result
%% sort them, and show the sorted result
:<z>append(z)>append(z)>append(z)>show()>sort()>show():>
