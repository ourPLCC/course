ClassVal
%%%

public abstract class ClassVal extends Val {

    public abstract ObjectVal makeObject(Ref objRef);

    public ClassVal classVal() {
        return this;
    }

    public boolean isClass() {
        return true;
    }

}

%%%

# a "parentless" class whose static environment extends the environment
# in which the class is created
EnvClass
%%%
import java.util.*;

public class EnvClass extends ClassVal {

    public Env staticEnv;

    public EnvClass(Env env) {
        // the static environment of this class is the current environment
	Bindings staticBindings = new Bindings();
        staticEnv = env.extendEnvRef(staticBindings);
	staticBindings.add("myclass", new ValRef(this));
        staticBindings.add("superclass", new ValRef(Val.nil));
    }

    public Env env() {
        return staticEnv;
    }

    public ObjectVal makeObject(Ref objRef) {
        // start with the static environment of this class
        Env e = staticEnv;
        // add binding of 'self' to this object
        Bindings fieldBindings = new Bindings();
        e = e.extendEnvRef(fieldBindings);
        ObjectVal objectVal = new ObjectVal(e);
        fieldBindings.add("self", objRef);
        fieldBindings.add("this", new ValRef(objectVal));
        return objectVal;
    }

    public String toString() {
        // return "class:" + staticEnv.getDepth();
        return "class";
    }

}
%%%

StdClass
%%%
import java.util.*;

public class StdClass extends ClassVal {

    public ClassVal superClass;
    public Bindings staticBindings; 
    public Fields fields;
    public Props props;
    public Methods methods;
    public Env staticEnv;
    public Env env; // the environment in which the class is created

    public StdClass(
            ClassVal superClass, // evaluated by ClassExp
            Statics statics,
            Fields fields,
            Props props,
            Methods methods) {
        this.superClass = superClass;
        this.fields = fields;
        this.props = props;
        this.methods = methods;
        staticEnv = superClass.env();
        // the staticBindings field is used to create instances of this class
        staticBindings = new Bindings();
        staticEnv = staticEnv.extendEnvRef(staticBindings);
        // initially create bindings for these static symbols ...
        staticBindings.add("myclass", new ValRef(this));
        staticBindings.add("superclass", new ValRef(superClass));
        // The static RHS expressions are evaluated in the modified
        // staticEnv that includes the bindings for myclass, superclass
        // new static bindings are added as they are created
        // as in top-level defines
        statics.addStaticBindings(staticBindings, staticEnv);
    }

    public Env env() {
        return staticEnv;
    }

    public ObjectVal makeObject(Ref objRef) {
        // create the parent object (recursively)
        ObjectVal parent = superClass.makeObject(objRef);
        // this object's environment extends the parent object's environment
        Env e = parent.objectEnv;

        // add this class's static bindings (including those for myclass, etc)
        e = e.extendEnvRef(staticBindings);

	// the fields come next
	// three fields are pre-defined: 'super', 'self', and 'this'
        // bind 'super' to the parent object
        // bind 'self' to the base object (deep)
        // bind 'this' to this object (shallow)
        // 'self' is unnecessary here, except that it speeds up lookups
	Bindings fieldBindings = new Bindings();
        e = e.extendEnvRef(fieldBindings);
        // bind 'super' to the parent object
        fieldBindings.add("super", new ValRef(parent)); // parent object

        // bind 'self' to this object (to speed up lookups)
        // bind all of this object's instance fields to nil
        for (Token t : fields.varList) {
            String s = t.toString();
            fieldBindings.add(s, new ValRef(Val.nil));
        }

        if (methods.varList.size() > 0) {
            // bind all this object's methods as in letrec
            LetrecDecls methodDecls =
                new LetrecDecls(methods.varList, methods.procList);
            e = methodDecls.addBindings(e);
        }

        if (props.varList.size() > 0) {
            // bind all of this object's properties as in letprop
            LetpropDecls propDecls
                = new LetpropDecls(props.varList, props.propList);
	    e = propDecls.addBindings(e);
        }

        // create the object and return it
        ObjectVal objectVal = new ObjectVal(e);
        fieldBindings.add("self", objRef); // deep
        fieldBindings.add("this", new ValRef(objectVal)); // shallow
        return objectVal;
    }

    public String toString() {
        return "class";
    }

}
%%%

# an object that captures the environment in which this object is created
ObjectVal
%%%
import java.util.*;

public class ObjectVal extends Val {

    public Env objectEnv;     // this object's environment

    public ObjectVal(Env objectEnv) {
        this.objectEnv = objectEnv;
    }

    public Env env() {
        return objectEnv;
    }
    
    public String toString() {
        return "object";
    }

}
%%%
