# class methods

Program
%%%
    public static Env env = Env.initEnv(); // the initial environment
%%%

Define
%%%
    // notice that calling toString triggers a modification
    // of the initial environment
    public String toString() {
        String id = var.toString();
        Env env = Program.env;
        Val val = exp.eval(env);
        env.addFirst(new Binding(id, new ValRef(val)));
        return id; // gotta return *something*
    }
%%%

Eval
%%%
    public String toString() {
        Val val = exp.eval(Program.env);
        return val.toString();
    }
%%%

Exp
%%%

    public Val eval(Env env) {
        Cont cont = new EvalCont(this, env, new HaltCont());
	Val val = cont.trampoline();
        return val;
    }

    public abstract Cont eval(Env env, Cont cont);

    // default value semantics
    public Ref evalRef(Env env) {
        Val val = this.eval(env);
        return new ValRef(val);
    }

%%%

PrimappExp
%%%

    public String toString() {
        return prim.toString()+ "(" + rands + ")";
    }
    
    public Cont eval(Env env, Cont cont) {
        return new PrimappCont(prim, rands.expList, env, cont);
    }

%%%

LitExp
%%%

    public Cont eval(Env env, Cont cont) {
        // return cont.apply(new IntVal(lit.str));
        return new ValCont(new IntVal(lit.str), cont);
    }

    public String toString() {
        return lit.str;
    }

%%%

IfExp
%%%
    public Cont eval(Env env, Cont cont) {
        return new IfCont(testExp, trueExp, falseExp, env, cont); 
    }

    public String toString() {
        return "if " + testExp + " then " + trueExp + " else " +falseExp;
    }
%%%

VarExp
%%%

    public Cont eval(Env env, Cont cont) {
        return new ValCont(env.applyEnv(var.str), cont);
        // return cont.apply(env.applyEnv(var.str));
    }

    // reference semantics for variables
    public Ref evalRef(Env env) {
        return env.applyEnvRef(var.str);
    }

    public String toString() {
        return var.str;
    }

%%%

LetExp
%%%

    public Cont eval(Env env, Cont cont) {
        return letDecls.makeLetCont(exp, env, cont);
    }

    public String toString() {
        return " ...LetExp... ";
    }

%%%

SetExp
%%%

    public Cont eval(Env env, Cont cont) {
        // don't actually modify the binding yet
        Ref ref = env.applyEnvRef(var.toString());
        cont = new SetCont(ref, cont);
        return new EvalCont(exp, env, cont);
        // cont = new SetCont(ref, cont);
        // return exp.eval(env, cont);
    }

    public String toString() {
        return " ...SetExp... ";
    }
%%%

LetrecExp
%%%

    public Cont eval(Env env, Cont cont) {
        Env nenv = letrecDecls.addBindings(env);
        return new EvalCont(exp, nenv, cont);
    }

    public String toString() {
        return " ...LetrecExp... ";
    }
%%%

ProcExp
%%%

    public Cont eval(Env env, Cont cont) {
        return new ValCont(proc.makeClosure(env), cont);
        // return cont.apply(proc.makeClosure(env));
    }

    public String toString() {
        return " ...ProcExp... ";
    }
%%%

AppExp
%%%

    public Cont eval(Env env, Cont cont) {
        cont = new AppCont(rands.expList, env, cont);
        return new EvalCont(exp, env, cont);
    }

    public String toString() {
        return " ...AppExp... ";
    }

%%%

SeqExp
%%%

    public Cont eval(Env env, Cont cont) {
        List<Exp> expList = seqExps.expList;
	if (expList.size() > 0)
	    cont = new SequenceCont(expList, env, cont);
        return new EvalCont(exp, env, cont);
    }

    public String toString() {
        return " ...SeqExp... ";
    }

%%%

Proc
%%%
    public Val makeClosure(Env env) {
        return new ProcVal(formals, exp, env);
    }
%%%

LetDecls
%%%
    public Cont makeLetCont(Exp exp, Env env, Cont cont) {
        if (varList.size() > 0)
            return new LetCont(varList, expList, exp, env, cont);
        return new EvalCont(exp, env, cont); // no bindings
    }

    public String toString() {
        return " ...LetDecls... ";
    }
%%%

LetrecDecls
%%%
    public Env addBindings(Env env) {
        if (varList.size() > 0) {
            Env nenv = env.extendEnvRef(null); // no bindings yet
            List<Val> valList = new ArrayList<Val>();
            for (Proc p : procList)
                valList.add(p.makeClosure(nenv));
            Bindings bindings =
                new Bindings(varList, Ref.valsToRefs(valList));
            nenv.replaceBindings(bindings);
            return nenv;
        }
        return env;
    }
%%%

Rands
%%%
    public String toString() {
        String s = "";   // the string to return
        String sep = ""; // no separator for the first expression
        // get all of the expressions in the expression list
        for (Exp e : expList) {
            s += sep + e;
            sep = ",";   // commas separate the rest of the expressions
        }
        return s;
    }
%%%

Formals
%%%
    public String toString() {
        String s = "";
        String sep = "";
        for (Token tok : varList) {
            s += sep + tok;
            sep = ",";
        }
        return s;
    }
%%%
