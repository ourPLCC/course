# variables.plcc
#
# Recognize "programs" that simply assign values to named variables,
# and then display those values when requested.
# Syntax is as follows.

# { a 1 b 2 c 3 ? a ? c { old_men 4 a 5 ? old_men ? a } ? a ? b ? c ? old_men }
#
# Output would be
# 1 3 4 5 1 2 3
# RuntimeException


skip WHITESPACE '\s+'

token OPENENV '\{'
token CLOSEENV '\}'
token QUESTION '\?'
token NUMBER '\d+'
token IDENT '[a-zA-Z]\w*'

%

<start> ::= OPENENV <declarations> <statements> CLOSEENV

<declarations>:NonEmptyDecls ::= <IDENT> <NUMBER> <declarations>
<declarations>:EmptyDecls ::=

<statements>:NonEmptyStmts ::= <statement> <statements>
<statements>:EmptyStmts ::=

<statement>:Display ::= QUESTION <IDENT>
<statement>:Block ::= <start>

%

Start

%%%

    @Override
    public String toString() {
        this.run( Env.ENV_NULL );
        System.out.println();
        return "Lookin' good!";
    }

    public void run( Env env ) {
        java.util.List< Binding > bindingList = declarations.addBindings();
        Env env2 = env.extendEnv( new Bindings( bindingList ) );
        statements.execute( env2 );
    }

%%%

Declarations

%%%

    public abstract java.util.List< Binding > addBindings();

%%%

EmptyDecls

%%%

    @Override
    public java.util.List< Binding > addBindings() {
        return new java.util.LinkedList<>();
    }

%%%

NonEmptyDecls

%%%

    @Override
    public java.util.List< Binding > addBindings() {
        java.util.List< Binding > tailBindings = declarations.addBindings();
        tailBindings.add( 0,
                    new Binding(
                            ident.str,
                            new Val( Integer.parseInt( number.str ) )
                    )
        );
        return tailBindings;
    }

%%%

Statements

%%%

    public abstract void execute( Env env );

%%%

EmptyStmts

%%%

    @Override
    public void execute( Env env ) {}

%%%

NonEmptyStmts

%%%

    @Override
    public void execute( Env env ) {
        statement.execute( env );
        statements.execute( env );
    }

%%%

Statement

%%%

    public abstract void execute( Env env );

%%%

Display

%%%

    @Override
    public void execute( Env env ) {
        System.out.print( env.applyEnv( ident.str ) + " " );
    }

%%%

Block

%%%

    @Override
    public void execute( Env env ) {
        start.run( env );
    }

%%%


include EnvSource/Env-i.java
include EnvSource/EnvNode-i.java
include EnvSource/Bindings-i.java
include EnvSource/Binding-i.java
include EnvSource/Val-i.java

