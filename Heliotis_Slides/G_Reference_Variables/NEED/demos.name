define thrice = proc(x) { x ; x ; x }
define num = 0
.thrice( set num = add1( num ) )

% =======================================================================

define tripleVal = proc(x) { +( x, +( x, x ) ) }

define fact = proc(n) if zero?(n) then 1 else *(n,.fact(sub1(n)))

.tripleVal( .fact(6) )
% NEED saves time.

% =======================================================================

% Why doesn't this work anymore?

define while = proc( test?, do, ans )
                letrec
                    loop = proc() if test? then { do; .loop() } else ans
                in
                    .loop()

define x = 0
define sum = 0
.while( <=?(x,10),
        {
            set sum = + ( sum, *( x, x ) );
            set x = add1( x )
        },
        sum
)
