define cons = proc( x, y ) proc( t ) if t then y else x

define prepend = proc( x, xs ) .cons( x, xs )

define head = proc( lst ) .lst( 0 )
define tail  = proc( lst ) .lst( 1 )

define seq = proc( n ) .prepend( n, .seq( add1( n ) ) )

define i_th = proc( lst, i )
                if i then .i_th( .tail( lst ), sub1( i ) ) else .head( lst )

============================================================================
Traces: Find the third element of a sequence that starts with 3.
Square brackets indicate the wrapping of an expression in a thunk.

define s3 = .seq( 3 )

          = .prepend( [3], .seq( add1( [3] ) ) )

          = .cons( [[3]], [.seq( add1( [3] ) )]  )

          = proc( t ) if t then [[.seq( add1( [3] ) )]] else [[[3]]]

.i_th( s3, 2 ) = if [2] then .i_th( .tail( [s3] ),sub1( [2] ) ) else .head( [s3] )
             = if 2 then .i_th( .tail( [s3] ),sub1( [2] ) ) else .head( [s3] )
             = .i_th( .tail( [s3] ), sub1( [2] ) )
             = if [sub1( [2] )] then .i_th( .tail( [.tail( [s3] )] ), sub1( [sub1( [2] )] ) ) else .head( [.tail( [s3] )] )
             = if sub1( [2] ) then .i_th( .tail( [.tail( [s3] )] ), sub1( [sub1( [2] )] ) ) else .head( [.tail( [s3] )] )
             = if sub1( 2 ) then .i_th( .tail( [.tail( [s3] )] ), sub1( [sub1( [2] )] ) ) else .head( [.tail( [s3] )] )
             = if 1 then .i_th( .tail( [.tail( [s3] )] ), sub1( [sub1( [2] )] ) ) else .head( [.tail( [s3] )] )
             = .i_th( .tail( [.tail( [s3] )] ), sub1( [sub1( [2] )] ) )
             = if [sub1( [sub1( [2] )] )] then .i_th( .tail( [.tail( [.tail( [s3] )] )] ), sub1( [sub1( [sub1( [2] )] )] ) ) else .head( [.tail( [.tail( [s3] )] )] )
             = if sub1( [sub1( [2] )] ) then .i_th( .tail( [.tail( [.tail( [s3] )] )] ), sub1( [sub1( [sub1( [2] )] )] ) ) else .head( [.tail( [.tail( [s3] )] )] )
             = if sub1( sub1( [2] ) ) then .i_th( .tail( [.tail( [.tail( [s3] )] )] ), sub1( [sub1( [sub1( [2] )] )] ) ) else .head( [.tail( [.tail( [s3] )] )] )
             = if sub1( sub1( 2 ) ) then .i_th( .tail( [.tail( [.tail( [s3] )] )] ), sub1( [sub1( [sub1( [2] )] )] ) ) else .head( [.tail( [.tail( [s3] )] )] )
             = if sub1( 1 ) then .i_th( .tail( [.tail( [.tail( [s3] )] )] ), sub1( [sub1( [sub1( [2] )] )] ) ) else .head( [.tail( [.tail( [s3] )] )] )
             = if 0 then .i_th( .tail( [.tail( [.tail( [s3] )] )] ), sub1( [sub1( [sub1( [2] )] )] ) ) else .head( [.tail( [.tail( [s3] )] )] )
             = .head( [.tail( [.tail( [s3] )] )] )
             = .[[.tail( [.tail( [s3] )] )]]( 0 )
             = .[.tail( [.tail( [s3] )] )]( 0 )
             = ..tail( [.tail( [s3] )] )( 0 )
             = ..[.tail( [s3] )]( 1 )( 0 )
             = ...tail( [s3] )( 1 )( 0 )
             = ....[s3]( 1 )( 1 )( 0 )
             = ....[proc( t ) if t then [[.seq( add1( [3] ) )]]  else [[[3]]]]( 1 )( 1 )( 0 )
             = ....proc( t ) if t then [[.seq( add1( [3] ) )]]  else [[[3]]]( 1 )( 1 )( 0 )
             = ...if [1] then [[.seq( add1( [3] ) )]]  else [[[3]]]( 1 )( 0 )
             = ...if 1 then [[.seq( add1( [3] ) )]]  else [[[3]]]( 1 )( 0 )
             = ...[[.seq( add1( [3] ) )]]( 1 )( 0 )
             = ...[.seq( add1( [3] ) )]( 1 )( 0 )
             = ....seq( add1( [3] ) )( 1 )( 0 )
             = ....prepend( [add1( [3] )], .seq( add1( [add1( [3] )] ) ) )( 1 )
             = ....cons( [[add1( [3] )]], [.seq( add1( [add1( [3] )] ) )] )( 0 )
             = ...proc( t ) if t then [[.seq( add1( [add1( [3] )] ) )]] else [[[add1( [3] )]]] )( 1 )( 0 )
             = ..if [1] then [[.seq( add1( [add1( [3] )] ) )]] else [[[add1( [3] )]]] )( 0 )
             = ..if 1 then [[.seq( add1( [add1( [3] )] ) )]] else [[[add1( [3] )]]] )( 0 )
             = ..[[.seq( add1( [add1( [3] )] ) )]]( 0 )
             = ..[.seq( add1( [add1( [3] )] ) )]( 0 )
             = ...seq( add1( [add1( [3] )] ) )( 0 )
             = ...prepend( [add1( [add1( [3] )] )], seq( add1( [add1( [add1( [3] )] )] ) ) )( 0 )
             = ...cons( [[add1( [add1( [3] )] )]], [seq( add1( [add1( [add1( [3] )] )] ) )] )( 0 )
             = ..proc ( t ) if t then [[seq( add1( [add1( [add1( [3] )] )] ) )]] else [[[add1( [add1( [3] )] )]]]( 0 )
             = .if [0] then [[seq( add1( [add1( [add1( [3] )] )] ) )]] else [[[add1( [add1( [3] )] )]]]
             = .if 0 then [[seq( add1( [add1( [add1( [3] )] )] ) )]] else [[[add1( [add1( [3] )] )]]]
             = [[[add1( [add1( [3] )] )]]]
             = [[add1( [add1( [3] )] )]]
             = [add1( [add1( [3] )] )]
             = add1( [add1( [3] )] )
             = add1( add1( [3] ) )
             = add1( add1( 3 ) )
             = add1( 4 )
             = 5

