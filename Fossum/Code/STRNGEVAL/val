Val
%%%
import java.util.*;

public abstract class Val {

    public static final Val nil = new NilVal();
    public static final Val zero = new IntVal(0);
    public static final ListVal listNull = new ListNull();

    public static Val [] toArray(List<Val> valList) {
        int n = valList.size();
        return valList.toArray(new Val[n]);
    }

    public Val apply(List<Val> valList) {
        throw new PLCCException(this + ": not a procedure");
    }
    
    public Env env() {
	throw new PLCCException("<" + this + ">: not an environment");
    }

    public boolean isTrue() {
	return true; // everything is true except for an IntVal of zero
    }

    public IntVal intVal() {
        throw new PLCCException(this + ": not an Int");
    }

    public ListVal listVal() {
        throw new PLCCException(this + ": not a List");
    }

    public StrngVal strngVal() {
        throw new PLCCException(this + ": not a String");
    }

    public Val first() {
        throw new PLCCException(this + ": not a String/List");
    }

    public Val rest() {
        throw new PLCCException(this + ": not a String/List");
    }

    public Val append(Val v) {
        throw new PLCCException(this + ": cannot append");
    }

    public ClassVal classVal() {
        throw new PLCCException(this + ": not a Class");
    }

    public ObjectVal objectVal() {
        throw new PLCCException(this + ": not an Object");
    }


    public ListNode listNode() {
        throw new PLCCException(this + ": not a nonempty List");
    }

    public boolean isList() {
	return false;
    }

    public boolean isStrng() {
        return false;
    }

    public boolean isObject() {
	return false;
    }

    public boolean isClass() {
        return false;
    }

    public ObjectVal makeObject(Ref objRef) {
        throw new PLCCException("new " + this + ": not a class");
    }

    public Val add(Val v) {
        throw new PLCCException(this + ": cannot add");
    }

    public int len() {
        throw new PLCCException(this + ": no length");
    }

    public String putc() {
	return this.toString();
    }
}
  

%%%

IntVal
%%%
import java.util.*;

public class IntVal extends Val {

    public int val;
    
    public IntVal(String s) {
        val = Integer.parseInt(s);
    }
    
    public IntVal(int v) {
        val = v;
    }

    public IntVal intVal() {
        return this;
    }

    public boolean isTrue() {
        return val != 0;
    }

    public String putc() {
	return "" + (char)val;
    }
    
    public String toString() {
        return "" + val;
    }

}
%%%

ProcVal
%%%
import java.util.*;

public class ProcVal extends Val {

    public Formals formals;
    public Exp body;
    public Env env;

    public ProcVal(Formals formals, Exp body, Env env) {
        this.formals = formals;
        this.body = body;
        this.env = env;
    }

    public Val apply(List<Val> valList) {
        List<Ref> refList = Ref.valsToRefs(valList);
        Bindings bindings = new Bindings(formals.varList, refList);
        Env nenv = env.extendEnvRef(bindings);
        return body.eval(nenv);
    }

    public ProcVal procVal() {
        return this;
    }

    public Env env() {
        return env;
    }

    public String toString() {
        String ret = "proc(";
        String sep = "";
        
        for (Token t : formals.varList) {
            String s = t.toString();
            ret += sep + s;
            sep = ",";
        }
        ret += ")";
        return ret;
    }
}

%%%

NilVal
%%%
import java.util.*;

public class NilVal extends Val {

    public boolean isTrue() {
        return false;
    }

    public String toString() {
        return "nil";
    }

}
%%%

StrngVal
%%%

public class StrngVal extends Val {

    public final ListVal listVal;

    public StrngVal(ListVal listVal) {
        this.listVal = listVal;
    }

    public StrngVal(String str) {
        listVal = toListVal(str, 0);
    }

    public boolean isTrue() {
        return listVal.isTrue();
    }

    public Val first() {
        return listVal.first();
    }

    public StrngVal rest() {
        return new StrngVal(listVal.rest().listVal());
    }

    public StrngVal add(Val v) {
        return new StrngVal(listVal.add(v.intVal())); // v must be an int
    }

    public StrngVal append(Val v) {
        return new StrngVal(listVal.append(v.strngVal().listVal));
    }

    public boolean isStrng() {
        return true;
    }

    public StrngVal strngVal() {
        return this;
    }

    public int len() {
        return listVal.len();
    }

    public String toString() {
        StringBuffer strBuff = new StringBuffer(listVal.len());
        ListVal listVal = this.listVal;
        while(listVal.isTrue()) {
            ListNode listNode = listVal.listNode();
            strBuff.append((char)listNode.val.intVal().val);
            listVal = listNode.listVal;
        }
        return strBuff.toString();
    }

    public static ListVal toListVal(String str, int loc) {
        if (loc == str.length())
            return Val.listNull;
        return toListVal(str, loc+1).add(new IntVal(str.charAt(loc)));
    }

}

%%%
