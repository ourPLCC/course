Prim
%%%
    // apply the primitive to the passed values
    public abstract Val apply(Val [] va);
%%%

Prim0
%%%
    // apply the 2-argument primitive to the passed values
    public abstract Val apply(Val v0, Val v1);
%%%

Prim1
%%%
    // apply the 2-argument primitive to the passed values
    public abstract Val apply(Val v0, Val v1);
%%%

Prim2
%%%
    // apply the one-argument primitive to the passed value
    public abstract Val apply(Val v0);
%%%

AddPrim0
%%%

    public String toString() {
	return "+";
    }

    public Val apply(Val v0, Val v1) {
	int i0 = v0.intVal().val;
	int i1 = v1.intVal().val;
	return new IntVal(i0 + i1);
    }
%%%

SubPrim0
%%%

    public String toString() {
	return "-";
    }

    public Val apply(Val v0, Val v1) {
	int i0 = v0.intVal().val;
	int i1 = v1.intVal().val;
	return new IntVal(i0 - i1);
    }
%%%

MulPrim1
%%%

    public String toString() {
	return "*";
    }

    public Val apply(Val v0, Val v1) {
	int i0 = v0.intVal().val;
	int i1 = v1.intVal().val;
	return new IntVal(i0 * i1);
    }

%%%

DivPrim1
%%%

    public String toString() {
	return "/";
    }

    public Val apply(Val v0, Val v1) {
	int i0 = v0.intVal().val;
	int i1 = v1.intVal().val;
	if (i1 == 0)
            throw new PLCCException("attempt to divide by zero");
	return new IntVal(i0 / i1);
    }

%%%

NegPrim2
%%%

    public String toString() {
	return "-";
    }

    public Val apply(Val v0) {
	int i0 = v0.intVal().val;
	return new IntVal(-i0);
    }

%%%

Add1Prim
%%%

    public String toString() {
	return "add1";
    }

    public Val apply(Val [] va) {
	if (va.length != 1)
	    throw new PLCCException("one argument expected");
	int i0 = va[0].intVal().val;
	return new IntVal(i0 + 1);
    }

%%%

Sub1Prim
%%%

    public String toString() {
	return "sub1";
    }

    public Val apply(Val [] va) {
	if (va.length != 1)
	    throw new PLCCException("one argument expected");
	int i0 = va[0].intVal().val;
	return new IntVal(i0 - 1);
    }

%%%

ZeropPrim
%%%

    public String toString() {
	return "zero?";
    }

    public Val apply(Val [] va) {
        if (va.length != 1)
	    throw new PLCCException("one argument expected");
	int i0 = va[0].intVal().val;
	return new IntVal(i0 == 0 ? 1 : 0);
    }

%%%

