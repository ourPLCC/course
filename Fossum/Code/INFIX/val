Val
%%%
import java.util.*;

public abstract class Val {

    public static Val [] toArray(List<Val> valList) {
        int n = valList.size();
        return valList.toArray(new Val[n]);
    }

    public Val apply(List<Val> args) {
        throw new PLCCException("Cannot apply " + this.toString());
    }

    public IntVal intVal() {
        throw new PLCCException(this + ": not an int");
    }

    public boolean isTrue() {
        return true;
    }

}
%%%

IntVal
%%%
import java.util.*;

public class IntVal extends Val {

    public int val;
    
    public IntVal(String s) {
        val = Integer.parseInt(s);
    }
    
    public IntVal(int v) {
        val = v;
    }

    public IntVal intVal() {
        return this;
    }
    
    public boolean isTrue() {
        return val != 0;
    }
    
    public String toString() {
        return "" + val;
    }

}

%%%

ProcVal
%%%
import java.util.*;

public class ProcVal extends Val {

    public Formals formals;
    public Block block;
    public Env env;

    public ProcVal(Formals formals, Block block, Env env) {
        this.formals = formals;
        this.block = block;
        this.env = env;
    }

    public Val apply(List<Val> args) {
        // bind the formals to the arguments
        Bindings bindings = new Bindings(formals.varList, args);
        // extend the captured environment with these bindings
        env = env.extendEnv(bindings);
        // and evaluate the body in this extended environment
        return block.eval(env);
    }
 

    public String toString() {
        return "proc";
    }

}
%%%
