%% this uses the contents of the 'list' file

%% A set of classes that implement Lists, similar
%% to the built-in list structure in OBJ.

define lst =
    let
        lst = class

            %% subclasses
            static lstNode = nil
            static lstNull = nil

            %% singleton lstNull
            static null = nil
        
            %% create a 'lst' object from a built-in list [...]
            static fromList = proc(list) % list is a 'built-in' list
                if list
                then .<new lstNode>init(first(list), .fromList(rest(list)))
                else null
        
            %% add a value to the current lst object, returning the new lst
            method add = proc(t) .<new lstNode>init(t,self)

        end
    in
        let
            lstNode = class extends lst

                field fst
                field rst
                field siz
                
                method filter = proc(f)
                  let
                    filtered = .<rst>filter(f) % recursive call
                  in
                    if .f(fst) then .<filtered>add(fst) else filtered
                method append = proc(l) :<rst>append(l)>add(fst):>
		method double = proc() .<self>append(self)
                %% sort this lst, returning a new lst
                %% uses quicksort, with the fst element of the lst as pivot
                method sort = proc()
                  let
                    %% sort everything in rst less than the pivot
                    lt = :<rst>filter(proc(t) <?(t, fst))>sort():>           
                    %% sort everything in rst greater than or equal to the pivot
                    %% and add the pivot to the resulting list
                    ge = :<rst>filter(proc(t) >=?(t, fst))>sort()>add(fst):>
                  in
                    %% combine the two halves into a single sorted list
                   .<lt>append(ge)
                method init = proc(fst,rst)
                    { set <self>fst = fst
                    ; set <self>rst = rst
                    ; set siz = add1(.<rst>size())
                    ; self
                    }
                method size = proc() siz
                method null? = proc() 0
                method show = proc() {display# fst ; .<rst>show() ; self }
                method map = proc(f) :<rst>map(f)>add(.f(fst)):>
            
                %% create a built-in list [...] from this lst object
                method toList = proc() addFirst(fst, .<rst>toList())
            
            end
            
            %% a class that defines an empty list object (no values)
            lstNull = class extends lst
            
                method filter = proc(f) self
                method append = proc(l) l
                method sort = proc() self
                method null? = proc() 1
                method show = proc() { newline ; self }
                method map = proc(f) self
                method size = proc() 0
                method toList = proc () []
            
            end
        in
            % capture references to lstNode, lstNull, and null
            % and return the lst class
            { set <lst>lstNode = lstNode
            ; set <lst>lstNull = lstNull
            ; set <lst>null = new lstNull
            ; lst
            }
            
define rands = 
  <lst>
  :<null>add(18)
        >add(25)
        >add(25)
        >add(18)
        >add(22)
        >add(32)
        >add(1)
        >add(32)
        >add(19)
        >add(0)
        >add(34)
        >add(19)
        >add(30)
        >add(14)
        >add(38)
        >add(0)
        >add(12)
        >add(13)
        >add(10)
        >add(42)
        >add(31)
        >add(47)
        >add(23)
        >add(5)
        >add(1)
        >add(8)
        >add(36)
        >add(33)
        >add(13)
        >add(41)
        >add(47)
        >add(6)
        >add(19)
        >add(19)
        >add(37)
        >add(42)
        >add(39)
        >add(39)
        >add(17)
        >add(41)
        >add(44)
        >add(39)
        >add(1)
        >add(27)
        >add(35)
        >add(43)
        >add(2)
        >add(15)
        >add(36)
        >add(26)
        >add(3)
        >add(49)
        >add(2)
        >add(1)
        >add(13)
        >add(11)
        >add(15)
        >add(38)
        >add(35)
        >add(47)
        >add(26)
        >add(42)
        >add(31)
        >add(8)
        >add(20)
        >add(27)
        >add(6)
        >add(25)
        >add(2)
        >add(22)
        >add(14)
        >add(14)
        >add(48)
        >add(39)
        >add(0)
        >add(46)
        >add(32)
        >add(6)
        >add(32)
        >add(41)
        >add(11)
        >add(9)
        >add(25)
        >add(23)
        >add(18)
        >add(12)
        >add(15)
        >add(15)
        >add(22)
        >add(37)
        >add(25)
        >add(43)
        >add(41)
        >add(1)
        >add(9)
        >add(3)
        >add(1)
        >add(23)
        >add(33)
        >add(31)
        >add(30)
        >add(36)
        >add(38)
        >add(35)
        >add(25)
        >add(26)
        >add(39)
        >add(2)
        >add(36)
        >add(37)
        >add(48)
        >add(1)
        >add(12)
        >add(15)
        >add(34)
        >add(5)
        >add(0)
        >add(36)
        >add(33)
        >add(16)
        >add(10)
        >add(33)
        >add(49)
        >add(45)
        >add(49)
        >add(12)
        >add(14)
        >add(22)
        >add(2)
        >add(24)
        >add(48)
        >add(41)
        >add(0)
        >add(5)
        >add(35)
        >add(47)
        >add(35)
        >add(7)
        >add(27)
        >add(37)
        >add(20)
        >add(47)
        >add(42)
        >add(35)
        >add(29)
        >add(39)
        >add(6)
        >add(47)
        >add(8)
        >add(8)
        >add(8)
        >add(36)
        >add(1)
        >add(15)
        >add(30)
        >add(29)
        >add(45)
        >add(44)
        >add(24)
        >add(6)
        >add(25)
        >add(4)
        >add(40)
        >add(4)
        >add(1)
        >add(34)
        >add(25)
        >add(43)
        >add(28)
        >add(38)
        >add(44)
        >add(42)
        >add(12)
        >add(24)
        >add(47)
        >add(18)
        >add(40)
        >add(42)
        >add(24)
        >add(42)
        >add(12)
        >add(8)
        >add(1)
        >add(32)
        >add(43)
        >add(39)
        >add(15)
        >add(33)
        >add(18)
        >add(15)
        >add(49)
        >add(44)
        >add(15)
        >add(43)
        >add(22)
        >add(0)
        >add(43)
        >add(22)
        >add(11)
        >add(44)
	>double()
	>double()
%	>double()
%	>double()
	>sort()
	>show()
        :>
