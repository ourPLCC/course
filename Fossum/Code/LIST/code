# class methods

Program
%%%
    public static Env env = Env.initEnv(); // the initial environment
%%%

Define
%%%
    // notice that calling $run() triggers a modification
    // of the initial environment
    public void $run() {
        Env env = Program.env;       // the top-level environment
        String id = var.toString();  // the LHS of the define
        Val val = exp.eval(env);     // the RHS value
        Binding b = env.lookup(id);  // only look at local bindings
        if (b != null)
            b.val = val;             // replace the binding
        else
            env.add(new Binding(id, val));
        System.out.println(id);
    }
%%%

Eval
%%%
    public void $run() {
        Val val = exp.eval(Program.env);
        System.out.println(val);
    }
%%%

Exp
%%%
    public abstract Val eval(Env env);
%%%

PrimappExp
%%%

    public String toString() {
        return prim.toString()+ "(" + rands + ")";
    }

    public Val eval(Env env) {
        // evaluate the terms in the expression list
        // and apply the prim to the array of integer results
        List<Val> args = rands.evalRands(env);
        Val [] va = Val.toArray(args);
        return prim.apply(va);
    }

%%%

LitExp
%%%

    public Val eval(Env env) {
        return new IntVal(lit.toString());
    }

    public String toString() {
        return lit.toString();
    }

%%%

IfExp
%%%
    public Val eval(Env env) {
        Val testVal = testExp.eval(env);
        if (testVal.isTrue())
            return trueExp.eval(env);
        else
            return falseExp.eval(env);
    }

    public String toString() {
        return "if " + testExp + " then " + trueExp + " else " +falseExp;
    }
%%%

VarExp
%%%

    public Val eval(Env env) {
        return env.applyEnv(var);
    }

    public String toString() {
        return var.toString();
    }

%%%

LetExp
%%%
    public Val eval(Env env) {
        Env nenv = letDecls.addBindings(env);
        return exp.eval(nenv);
    }

    public String toString() {
        return " ...LetExp... ";
    }
%%%

LetrecExp
%%%
    public Val eval(Env env) {
        Env nenv = letDecls.addLetrecBindings(env);
        return exp.eval(nenv);
    }

    public String toString() {
        return " ...LetrecExp... ";
    }
%%%

ProcExp
%%%
    public Val eval(Env env) {
        return proc.makeClosure(env);
    }

    public String toString() {
        return " ...ProcExp... ";
    }
%%%

AppExp
%%%

    public Val eval(Env env) {
        Val p = exp.eval(env);
        List<Val> args = rands.evalRands(env);
        return p.apply(args, env);
    }

    public String toString() {
        return " ...AppExp... ";
    }

%%%

SeqExp
%%%
    public Val eval(Env env) {
        Val v = exp.eval(env);
        for (Exp e : seqExps.expList)
            v = e.eval(env);
        return v;
    }

    public String toString() {
        return " ...SeqExp... ";
    }

%%%

ListExp
%%%
    public Val eval(Env env) {
        List<Val> valList = new LinkedList<Val>();
        // the valList values will appear in reverse order
        for (Exp e : rands.expList)
            valList.add(0, e.eval(env));
        ListVal lst = ListVal.listNull; // start with the empty list
        for (Val v : valList)
            lst = lst.addFirst(v);
        return lst;
    }
%%%

Formals:init
%%%
        // check for duplicates during parsing
        Env.checkDuplicates(varList, " in proc formals");
%%%

Proc
%%%
    public Val makeClosure(Env env) {
        return new ProcVal(formals, exp, env);
    }
%%%

LetDecls:init
%%%
        // check for duplicates during parsing
        Env.checkDuplicates(varList, " in let/letrec LHS identifiers");
%%%

LetDecls
%%%
    public Env addBindings(Env env) {
        Rands rands = new Rands(expList);
        List<Val> valList = rands.evalRands(env);
        Bindings bindings = new Bindings(varList, valList);
        return env.extendEnv(bindings);
    }

    public Env addLetrecBindings(Env env) {
        Env nenv = env.extendEnv(new Bindings());
        Iterator<Token> varIter = varList.iterator();
        Iterator<Exp> expIter = expList.iterator();
        while (varIter.hasNext()) {
            String str = varIter.next().toString();
            Val val = expIter.next().eval(env);
            nenv.add(new Binding(str, val));
        }
        return nenv;
    }

    public String toString() {
        return " ...LetDecls... ";
    }
%%%

Rands
%%%
    public String toString() {
        String s = "";   // the string to return
        String sep = ""; // no separator for the first expression
        // get all of the expressions in the expression list
        for (Exp e : expList) {
            s += sep + e;
            sep = ",";   // commas separate the rest of the expressions
        }
        return s;
    }

    // evaluate the individual terms in expList using the given environment
    // and return a List<Val> object
    public List<Val> evalRands(Env env) {
        List<Val> args = new ArrayList<Val>(expList.size());
        for (Exp e : expList)
            args.add(e.eval(env));
        return args;
    }
%%%
