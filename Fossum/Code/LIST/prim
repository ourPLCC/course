Prim
%%%
    // apply the primitive to the passed values
    public abstract Val apply(Val [] va);
%%%

AddPrim
%%%

    public String toString() {
	return "+";
    }

    public Val apply(Val [] va) {
	if (va.length != 2)
	    throw new PLCCException("+: two arguments expected");
	int i0 = va[0].intVal().val;
	int i1 = va[1].intVal().val;
	return new IntVal(i0 + i1);
    }
%%%

SubPrim
%%%

    public String toString() {
	return "-";
    }

    public Val apply(Val [] va) {
	if (va.length != 2)
	    throw new PLCCException("-: two arguments expected");
	int i0 = va[0].intVal().val;
	int i1 = va[1].intVal().val;
	return new IntVal(i0 - i1);
    }
%%%

MulPrim
%%%

    public String toString() {
	return "*";
    }

    public Val apply(Val [] va) {
	if (va.length != 2)
	    throw new PLCCException("*: two arguments expected");
	int i0 = va[0].intVal().val;
	int i1 = va[1].intVal().val;
	return new IntVal(i0 * i1);
    }

%%%

DivPrim
%%%

    public String toString() {
	return "/";
    }

    public Val apply(Val [] va) {
	if (va.length != 2)
	    throw new PLCCException("/:two arguments expected");
	int i0 = va[0].intVal().val;
	int i1 = va[1].intVal().val;
	if (i1 == 0)
            throw new PLCCException("attempt to divide by zero");
	return new IntVal(i0 / i1);
    }

%%%

Add1Prim
%%%

    public String toString() {
	return "add1";
    }

    public Val apply(Val [] va) {
	if (va.length != 1)
	    throw new PLCCException("add1: one argument expected");
	int i0 = va[0].intVal().val;
	return new IntVal(i0 + 1);
    }

%%%

Sub1Prim
%%%

    public String toString() {
	return "sub1";
    }

    public Val apply(Val [] va) {
	if (va.length != 1)
	    throw new PLCCException("sub1: one argument expected");
	int i0 = va[0].intVal().val;
	return new IntVal(i0 - 1);
    }

%%%

ZeropPrim
%%%

    public String toString() {
	return "zero?";
    }

    public Val apply(Val [] va) {
        if (va.length != 1)
	    throw new PLCCException("zero?: one argument expected");
	int i0 = va[0].intVal().val;
	return new IntVal(i0 == 0 ? 1 : 0);
    }

%%%

FirstPrim
%%%
    public String toString() {
        return "first";
    }

    public Val apply(Val [] va) {
        if (va.length != 1)
            throw new PLCCException("first: one argument expected");
        Val v = va[0].listNode().val;
	return v;
    }
%%%

RestPrim
%%%
    public String toString() {
        return "rest";
    }

    public Val apply(Val [] va) {
        if (va.length != 1)
            throw new PLCCException("rest: one argument expected");
        Val v = va[0].listNode().list;
	return v;
    }
%%%

AddFirstPrim
%%%
    public String toString() {
        return "addFirst";
    }

    public Val apply(Val [] va) {
        if (va.length != 2)
            throw new PLCCException("addFirst: two arguments expected");
	Val v0 = va[0];
        Val v1 = va[1];
	return v1.listVal().addFirst(v0);
    }
%%%

ListpPrim
%%%
    public String toString() {
        return "list?";
    }

    public Val apply(Val [] va) {
	if (va.length != 1)
            throw new PLCCException("list?: one argument expected");
        return new IntVal(va[0].isList() ? 1 : 0);
    }
%%%
