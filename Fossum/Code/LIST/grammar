# Language LIST
#   Language V6 + list objects

# Lexical specification
#   variable names (VAR) now can have a '?' in them
skip WHITESPACE '\s+'
skip COMMENT '%.*'
LIT '\d+'
LPAREN '\('
RPAREN '\)'
COMMA ','
ADDOP '\+'
SUBOP '\-'
MULOP '\*'
DIVOP '/'
ADD1OP 'add1'
SUB1OP 'sub1'
ZEROP 'zero\?'
FIRSTOP 'first'
RESTOP 'rest'
ADDFIRSTOP 'addFirst'
LISTP 'list\?'
IF 'if'
THEN 'then'
ELSE 'else'
LET 'let'
LETREC 'letrec'
DEFINE 'define'
IN 'in'
EQUALS '='
PROC 'proc'
DOT '\.'
LBRACE '\{'
RBRACE '\}'
LBRACK '\['
RBRACK '\]'
SEMI ';'
VAR '[A-Za-z][\w?]*'
%
# Grammar
<program>:Define ::= DEFINE <VAR> EQUALS <exp>
<program>:Eval ::= <exp>
<exp>:LitExp   ::= <LIT>
<exp>:VarExp   ::= <VAR>
<exp>:IfExp    ::= IF <exp>testExp THEN <exp>trueExp ELSE <exp>falseExp
<exp>:PrimappExp ::= <prim> LPAREN <rands> RPAREN
<exp>:LetExp   ::= LET <letDecls> IN <exp>
<exp>:LetrecExp ::= LETREC <letDecls> IN <exp>
<exp>:ProcExp  ::= <proc>
<exp>:AppExp   ::= DOT <exp> LPAREN <rands> RPAREN
<exp>:SeqExp   ::= LBRACE <exp> <seqExps> RBRACE
<exp>:ListExp  ::= LBRACK <rands> RBRACK
<seqExps>      **= SEMI <exp>
<proc>         ::= PROC LPAREN <formals> RPAREN <exp>
<formals>      **= <VAR> +COMMA
<letDecls>     **= <VAR> EQUALS <exp>
<rands>        **= <exp> +COMMA
<prim>:AddPrim ::= ADDOP
<prim>:SubPrim ::= SUBOP
<prim>:MulPrim ::= MULOP
<prim>:DivPrim ::= DIVOP
<prim>:Add1Prim ::= ADD1OP
<prim>:Sub1Prim ::= SUB1OP
<prim>:ZeropPrim ::= ZEROP
<prim>:FirstPrim ::= FIRSTOP
<prim>:RestPrim ::= RESTOP
<prim>:AddFirstPrim ::= ADDFIRSTOP
<prim>:ListpPrim ::= LISTP
%
include code
include prim
include envVal
include val
